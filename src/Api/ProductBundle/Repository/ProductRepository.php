<?php

namespace Api\ProductBundle\Repository;

use Api\ProductBundle\Entity\Product;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Symfony\Component\Config\Definition\Exception\Exception;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
	/**
	 * @param array $limit
	 * @param array $order
	 * @return array
	 */
	public function all($limit = array(), $order = array())
	{
		$qb = $this->createQueryBuilder($this->getEntityName());

		if (!empty($limit)) {
			// Set max results
			if (array_key_exists('limit', $limit) && is_int($limit['limit'])) {
				$qb->setMaxResults($limit['limit']);
			}

			// Set offset
			if (array_key_exists('offset', $limit) && is_int($limit['offset'])) {
				$qb->setFirstResult($limit['offset']);
			}
		}

		// Set order
		if (!empty($order)) {
			foreach ($order as $field => $direction) {
				$qb->addOrderBy(sprintf($this->getEntityName().'.%s', $field), $direction);
			}
		}

		$qb = $qb->getQuery();

		// Return values using paginator, as we have to fetch joined entities
		$paginator = new Paginator($qb);
		$elements = [];

		foreach ($paginator as $e) {
			$elements[] = $e;
		}

		return $elements;
	}

	/**
	 * @param Product $product
	 * @return Product
	 */
	public function create(Product $product)
	{
		$this->getEntityManager()->persist($product);
		$this->getEntityManager()->flush();

		return $product;
	}

	/**
	 * @param Product $product
	 * @return bool
	 */
	public function delete(Product $product)
	{
		$this->getEntityManager()->remove($product);
		$this->getEntityManager()->flush();

		return true;
	}
}
